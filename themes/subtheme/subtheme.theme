<?php

use Drupal\field\Entity\FieldConfig;
use Drupal\block_content\Entity\BlockContent;
use Drupal\node\Entity\Node;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use \Drupal\views\ViewExecutable;

/**
 * Implements hook_preprocess_HOOK() for node document templates.
 */

function subtheme_preprocess_node(array &$variables) {
  
  if($variables['elements']['field_recipe_comments']) {
    $variables['node_label'] = $variables['label']['0']['#context']['value'];
  }
  if(!empty($variables['elements']['#node'])) {
    $user_id = $variables['user']->id();
    $user_node = \Drupal\user\Entity\User::load($user_id);
    $flag_service = \Drupal::service('flag');
    $flag_link_builder = \Drupal::service('flag.link_builder');
    $follow_flag = $flag_link_builder->build($user_node->getEntityTypeId(), $user_node->id(), 'follow');
    $variables['follow_flag'] = $follow_flag;
    $variables['follow_flag']['link']['#attributes']['class'][] = "txt-link-sm";
    // $entity = $variables['elements']['#node'];
    // $variables['main_menu'] = subtheme_get_menu('main_menu');
    // $variables['date'] = format_date($entity->created->value, "custom", "F d, Y");
    $flag = $flag_service->getFlagById("favorite");
    $variables['favorite_count'] = \Drupal::service('flag.count')->getFlagFlaggingCount($flag);
    $comment_view = views_embed_view('comment_view');
    $variables['comment_view'] = $comment_view;
    $related_recipes = views_embed_view('related_recipes');
    $variables['related_recipes'] = $related_recipes;
    $variables['vid_id'] = $variables['content']['field_video_url'][0]['#video_id'];
    // $vid_id = explode("?v=", $variables['content']['field_video_url'][0]);
    
    // dump($variables['vid_id']);
  }
}

function subtheme_preprocess_user(array &$variables) {
  // $following = views_embed_view('following');
  // $variables['following'] = $following;
  // $easter_slider = views_embed_view('easter_slider');
  // $variables['easter_slider'] = $easter_slider;
  
  // $user = user_load($variables['user']->id());
  // $variables['user_img'] = $user->field_acct_img->getValue();
  // $variables['elements']['field_account_image']['#title'] = "U";
  // dpm($variables);
}

/**
 * Implements hook_preprocess_HOOK() for block document templates.
 */

function subtheme_preprocess_block(array &$variables) {
  // dump($variables['elements']['content']['header_background_image']);
  // if(!empty($variables['content']['#block_content'])) {
  //   $entity = $variables['content']['#block_content'];
  //   $bundle = $entity->bundle();

  //   $fields_definition = $entity->getFieldDefinitions();
  //   foreach($fields_definition as $field_definition) {
  //    if(!empty($field_definition->getTargetBundle()) && $field_definition->get('field_type') == 'entity_reference') { 
  //       $entity_reference_field = collectFieldValues($entity, $field_definition);
  //       if($entity_reference_field) {
  //         $key = key($entity_reference_field);
  //         $variables['content'][$key] = ($entity_reference_field[$key]);
  //       }
  //     }
  //   }
  //   $variables['main_menu'] = subtheme_get_menu('main_menu');
  //   $variables['top_menu'] = subtheme_get_menu('top-menu');
  // }
}

function subtheme_preprocess_field(&$variables){
  if($variables['field_name'] == "field_ingredient_section_title") {
    $variables['label_hidden'] = "true";
  }
  if($variables['field_name'] == "field_ingredient_section_body") {
    $variables['label_hidden'] = "true";
    $variables['attributes']['class'][] = "rcp-ingredients";
  }
}

function subtheme_preprocess_form(&$variables){
  // dpm($variable['element']['field_category_course']['#attributes']);
  //below returns 0 if anonymous user
  if($variables['element']['#form_id'] == "comment_recipe_comment_form") {
    $user_id = $variables['user']->id();
    $user_node = \Drupal\user\Entity\User::load($user_id);
    $file_url = $user_node->field_account_image->entity->url();
    $variables['user_image_url'] = $file_url;
  }
}


function collectFieldValues($entity, $field_definition) {
  $bundle = $entity->bundle();
  $entity_type = $entity->getEntityTypeId();
  $field_name = $field_definition->getName();
  $field_value = $entity->get($field_name)->getValue();
  $field_instance = FieldConfig::loadByName($entity_type, $bundle , $field_name);
  $settings = $field_instance->getSettings();

  switch($settings['handler']) {
    case 'default:view':
      $view_render_array = views_embed_view($field_value[0]['target_id']);
      return array($field_name => $view_render_array);
      break;
    case 'default:node':
      return;
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 
/*
function subtheme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if(!empty($variables['elements']['content']['#block_content'])) {
    $block = $variables['elements']['content']['#block_content'];
    $bundle = $block->bundle();
    array_unshift($suggestions, 'block__block_content__' . $bundle);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for user templates.
 */

function subtheme_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  if(!empty($variables['elements']['#view_mode'])) {
    $userviewmode = $variables['elements']['#view_mode'];
    array_unshift($suggestions, 'user__' . $userviewmode);
  }
}
/**
 * Implements hook_theme_suggestions_HOOK_alter() for node templates.
 */
/*
function subtheme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // if(!empty($variables['elements']['#view_mode'])) {
  //   $userviewmode = $variables['elements']['#view_mode'];
  //   array_unshift($suggestions, 'user__' . $userviewmode);
  // }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */

function subtheme_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
  $suggestions[] = 'form_element__' . $variables['element']['field_category_course']['widget']['#title'];
  // dpm($variables['element']['field_category_course']['widget']['#title']);
  // dpm($suggestions);
}

function subtheme_preprocess_image(&$variables) {
  unset($variables['attributes']['width']);
  unset($variables['attributes']['height']);
  // $variables['attributes']['height'] = "150";
}

function subtheme_preprocess_taxonomy_term(&$variables) {
  // dump($variables);
}

// function subtheme_field_widget_checkbox_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {

// }
/*
function hook_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  // Add a css class to widget form elements for all fields of type mytype.
  $field_definition = $context['items']->getFieldDefinition();
  // dpm($element);
  if ($field_definition->getType() == 'container') {
    // Be sure not to overwrite existing attributes.
    // dpm($element);
    $element['#attributes']['class'][] = 'myclass';
  }
}
*/


function subtheme_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  
}


function subtheme_preprocess_input(&$variable) {
  if($variable['element']['#title'] == "Subject") {
  }
  
}

function subtheme_preprocess_textarea(&$variable) {
  if($variable['element']['#title'] == "Comment") {
    // $variable['#attributes']['class'][] = "form-multi-line-text-heigh w-input";
  }
}
function subtheme_preprocess_table(&$variables) {
  
  unset($variables['header']);
  // // unset($variables['rows'][1]);
  unset($variables['rows'][0]['cells'][0]);
  
  $variables['rows'][0]['cells'][1]['content']['subform']['field_ingredient_section_title']['widget'][0]['value']['#title_display'] = "none";
  $variables['rows'][0]['cells'][1]['content']['subform']['field_ingredient_section_title']['widget'][0]['value']['#attributes']['class'][] = "form-field-66-pc w-input";
  $variables['rows'][0]['cells'][1]['content']['subform']['field_ingredient_section_title']['widget'][0]['value']['#attributes']['data-name'][] = "Ingredient Section Title";
  $variables['rows'][0]['cells'][1]['content']['subform']['field_ingredient_section_title']['widget'][0]['value']['#attributes']['placeholder'][] = "Eg. Cake, or Frosting (if recipe has multiple parts)";
  $variables['rows'][0]['cells'][1]['content']['subform']['field_ingredient_section_body2']['widget'][0]['value']['#title_display'] = "none";
  $variables['rows'][0]['cells'][1]['content']['subform']['field_ingredient_section_body2']['widget'][0]['value']['#attributes']['class'][] = "form-multi-line-text-heigh w-input";
  $variables['rows'][0]['cells'][1]['content']['subform']['field_ingredient_section_body2']['widget'][0]['value']['#attributes']['data-name'][] = "Ingredients";
  $variables['rows'][0]['cells'][1]['content']['subform']['field_ingredient_section_body2']['widget'][0]['value']['#attributes']['data-name']['placeholder'][] = "Add your ingredients here â€” add as many ingredients as you need!";
  unset($variables['rows'][0]['cells'][2]);
  // dump($variables);
}

function subtheme_preprocess_comment(&$variables) {
  $date_formatted = DateTime::createFromFormat('D, m/d/Y - H:i', $variables['created'])->format('M d, Y');
  $variables['created'] = $date_formatted;
  $recipe_nid = $variables['commented_entity']->get('nid')[0]->value;
  $recipe_node = \Drupal\node\Entity\Node::load($recipe_nid);
  $recipe_title = $recipe_node->get('title')[0]->value;
  $variables['title'] = $recipe_title;
  // dump($variables);
}

// function subtheme_theme() {
//   $themes['impsu_user_edit_form'] = [
//     'render element' => 'form'
//   ];
//   return $themes;
// }
/*
function subtheme_get_menu($menu_name) {
  $block_manager = \Drupal::service('plugin.manager.block');
  $plugin_block = $block_manager->createInstance("system_menu_block:$menu_name");
  $render = $plugin_block->build();
  return $render;
}
*/
function subtheme_preprocess_form_element(&$variable){
  if ($variable['type']=="checkbox"){
    $variable['element']['#attributes']['class'][] = "display-none w-checkbox-input";
  }
}


function subtheme_preprocess_form_element_label(&$variable){
  // unset($variable['element']['#title']);
}
